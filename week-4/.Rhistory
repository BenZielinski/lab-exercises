# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_e))
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
len <- nchar(lyric)
fruits <- substr(lyric, 15, len)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Variables
my_num <- 119
library("stringr")
sentence <- "The quick brown fox jumped over the lazy dog"
# Get words 2 through 4 of the sentence
word(sentence, 2, 4)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value) {
value + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
meters <- (0.3048 * feet) + (0.0254 * inches)
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imerial_to_metric(5, 10)
# Exercise 3: writing and executing functions
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(value) {
value + 3
}
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
meters <- (0.3048 * feet) + (0.0254 * inches)
meters
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5, 10)
?seq
seq(10, 1)
?plot
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
?plot
# Exercise 1: creating and operating on vectors
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Ben", "Nick", "Omar")
print(names)
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
len <- length(n)
# Add 1 to each element in `n` and print the result
n_plus_one <- n + 1
print(n_plus_one)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10, 1)
# Subtract `m` FROM `n`. Note the recycling!
n - m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
# Use the `plot()` function to plot your `wave`!
plot(x_range, wave)
?abs
?all
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2, 100, 2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5)
gsub
?gsub
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
gsub(phone_numbers > 5, 5, phone_numbers)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, large, 5)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
replace(phone_numbers, large, 5)
large
?replace
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, large, 5)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers <- replace(phone_numbers, phone_numbers > 5, 5)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers <- replace(phone_numbers, phone_numbers %% 2 == 1, 0)
clc
?sub
library("stringr")
my_age <- 20
my_name <- "Benjamin Zielinski"
make_introduction <- function(name, age) {
paste("Hello my name is", name, "and I'm", age, "years old")
}
my_intro <- make_introduction(my_Age, my_name)
print(my_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
library("stringr")
my_age <- 20
my_name <- "Benjamin Zielinski"
make_introduction <- function(name, age) {
paste("Hello my name is", name, "and I'm", age, "years old")
}
my_intro <- make_introduction(my_age, my_name)
print(my_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
library("stringr")
my_age <- 20
my_name <- "Benjamin Zielinski"
make_introduction <- function(name, age) {
paste("Hello my name is", name, "and I'm", age, "years old")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
my_intro
books <- c("Hunger Games", "Eragon", "Pendragon", "A Song of Ice and Fire", "Paper Towns", "Maze Runner")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
books <- c("Hunger Games", "Eragon", "Pendragon", "A Song of Ice and Fire", "Paper Towns", "Maze Runner")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
# Removes a book that should no longer be on a list of books
# Inputs: a list of books and an index for which book should be removed
# Output: a list of books that doesn't contain the indicated book
remove_book <- function(book_list,index) {
index <- -1 * index
book_list[index]
}
test <- remove_book(books, 4)
test
long_titles <- books[nchar(books) > 15]
print(long_titles)
numbers <- 1:201
numbers
squared_numbers <- numbers^2
numbers <- 1:201
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- squared_numbers[length(squared_numbers) / 2]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
?as.Date
summer_break <- as.Date(2018-6-9)
summer_break <- as.Date("June 9, 2018")
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
my_intro
today - summer_break
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
# Builds an introduction that gives number of days until next birthday
# Inputs: name, age, date object
# Output: string
make_birthday_intro <- function(name, age, birthday_date) {
difference <- birthday_date - Sys.Date()
if (difference < 0) {
difference <- difference + 365
}
intro <- make_introduction(name, age)
new_age <- age + 1
birthday_intro <- paste(intro, "In", difference, "days I'll be", new_age)
}
make_birthday_intro(Benjamin, 20, as.Date("2018-3-30"))
make_birthday_intro("Benjamin", 20, as.Date("2018-3-30"))
birthday_intro
make_birthday_intro <- function(name, age, birthday_date) {
difference <- birthday_date - Sys.Date()
if (difference < 0) {
difference <- difference + 365
}
intro <- make_introduction(name, age)
new_age <- age + 1
birthday_intro <- paste(intro, "In", difference, "days I'll be", new_age)
birthday_intro
}
make_birthday_intro("Ben", 20, as.Date("2018-3-30"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018-03-30"))
print(my_bday_intro)
#################
#### PART 1 #####
#################
library("stringr")
my_age <- 20
my_name <- "Benjamin Zielinski"
# Writes a brief introduction giving a person's name
# Inputs: a name and an age
# Output: a character string
make_introduction <- function(name, age) {
paste("Hello my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("Hunger Games", "Eragon", "Pendragon", "A Song of Ice and Fire", "Paper Towns", "Maze Runner")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Removes a book that should no longer be on a list of books
# Inputs: a list of books and an index for which book should be removed
# Output: a list of books that doesn't contain the indicated book
remove_book <- function(book_list,index) {
index <- -1 * index
book_list[index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Uses the length() function and divides by 2 to find the middle index, i.e. median
squared_median <- squared_numbers[length(squared_numbers) / 2]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
# Builds an introduction that gives number of days until next birthday
# Inputs: name, age, date object
# Output: string
make_birthday_intro <- function(name, age, birthday_date) {
difference <- birthday_date - Sys.Date()
if (difference < 0) {
difference <- difference + 365
}
intro <- make_introduction(name, age)
new_age <- age + 1
birthday_intro <- paste(intro, "In", difference, "days I'll be", new_age)
birthday_intro
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018-03-30"))
print(my_bday_intro)
#################
#### PART 1 #####
#################
library("stringr")
my_age <- 20
my_name <- "Benjamin Zielinski"
# Writes a brief introduction giving a person's name
# Inputs: a name and an age
# Output: a character string
make_introduction <- function(name, age) {
paste("Hello my name is", name, "and I'm", age, "years old.")
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("Hunger Games", "Eragon", "Pendragon", "A Song of Ice and Fire", "Paper Towns", "Maze Runner")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
# Removes a book that should no longer be on a list of books
# Inputs: a list of books and an index for which book should be removed
# Output: a list of books that doesn't contain the indicated book
remove_book <- function(book_list,index) {
index <- -1 * index
book_list[index]
}
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers^2
squared_mean <- mean(squared_numbers)
print(squared_mean)
# Uses the length() function and divides by 2 to find the middle index, i.e. median
squared_median <- squared_numbers[length(squared_numbers) / 2]
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
#################
#### PART 4 #####
#################
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
# Builds an introduction that gives number of days until next birthday
# Inputs: name, age, date object
# Output: string
make_birthday_intro <- function(name, age, birthday_date) {
difference <- birthday_date - Sys.Date()
if (difference < 0) {
difference <- difference + 365
}
intro <- make_introduction(name, age)
new_age <- age + 1
birthday_intro <- paste(intro, "In", difference, "days I'll be", new_age)
birthday_intro
}
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018-03-30"))
print(my_bday_intro)
iris_df <- data.frame(iris)
View(iris_df)
# Select only rows of Virginica flowers
iris_df[iris_df$Species == virginica]
# Select only rows of Virginica flowers
iris_df[iris_df$Species == "virginica"]
iris_df <- data.frame(iris)
# Select only rows of Virginica flowers
iris_df[iris_df$Species == "virginica"]
# Select only rows of Virginica flowers
iris_df[iris_df$Species == "virginica", ]
# Select only the sepal legnth of the Virginica flowers
iris_df[iris_df$Species == "virginica", "Sepal.Length"]
# Select rows where Petal.Length > 4.0
iris_df[iris_df$Petal.Length > 4.0, ]
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$long_petals <- iris_df$Petal.Length > 4.0
View(iris_df)
# Find the species type of the flower that has the longest Sepal length
iris_df[iris_df$Sepal.Length == max(iris_df$Sepal.Length), "Species"]
View(iris_df)
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
iris_df[iris_df$Species == "setosa" && iris_df$Sepal.Width > 3.0, ]
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
iris_df[iris_df$Species == "setosa" && iris_df$Sepal.Width > 3.0, ]
# Find the species type of the flower that has the longest Sepal length
iris_df[iris_df$Sepal.Length == max(iris_df$Sepal.Length), "Species"]
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
iris_df[iris_df$Species == "setosa" & iris_df$Sepal.Width > 3.0, ]
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
?read.csz
?read.csv
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
read.csv("data/team.data")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.data")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
setwd("~/College/2017-2018/Spring Quarter/Info 201/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
View(team_data)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, steal_ratio = TOV / STL)
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
View(team_data)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(team_data, steal_ratio)
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
View(team_data)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
highest_TRB <- select(filter(team_data, TRB == max(TRB)), Team, TRB)
# Print only the name of the team that had the highest total rebounds
# (that also happens to be the greatest team of all time)
print(highest_TRB)
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
pokemon <- read.csv("data/Pokemon.csv", stringsAsFactors = FALSE)
# First, View() the data set to see what info you have to work with
View(pokemon)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water_pkm <- filter(pokemon, Type.1 == water)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water_pkm <- filter(pokemon, Type.1 == "Water")
# Group the pokemon by Type 2 and save into a descriptive variable.
type_2 <- group_by(water_pkm, Type.2)
# View your new variable -- did it affect anything?
View(type_2)
